Abstract Modifier:

Abstract Modifier indicates that a class/member is missing implementation...

public class Shape
{
	public virtual void Draw()
	{
	}
}

public class Circle: Shape
{
	public override void Draw()
	{
		Console.WriteLine("Drawing a circle");
	}
}

The circle derives from the shape and we override the draw method...
Problem: 
	Drawing of a shape cannot be defined...In such cases we use abstract and we donot provide implementation and the derived classes provide the implementation..


Note: When a method is declared abstract, then the class which contains the method also needs to be declared as abstract..

The code changes to:

public abstract class Shape
{
	public abstract void Draw();
}

public class Circle : Shape
{
	public override void Draw()
	{
		//Implementation
	}
}

abstract says that: the implementation is not provided and must be done by the derived classes

Note: Abstract methods are virtual....


Rules for abstract members:

1. Donot include implementation
public abstract void Draw();

2. If a member is declared abstract, then the containing class need to be declared abstract too...
public abstract class Shape
{
	public abstract void Draw();
}

3. In a derived class, implement all abstract members in the base abstract class...

4. Abstract class cannot be instantiated [no objects]...


Why?

When we want a method to be implemented in all the derived classes but the method is not same to all the classes..